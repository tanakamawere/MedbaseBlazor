@page "/admin/questions/{topicId:int}"
@page "/admin/questions"
@layout AdminLayout
@inject IApiRepository repository
@using MedbaseBlazor.Services

<PageTitle>Questions</PageTitle>


@if (!questionsList.Any())
{
    <div><em><strong>Loading...</strong></em></div>
}
else
{
    <MudTable Items="@questionsList" Dense="true" Hover="true" Bordered="true" Striped="@striped">
        <ToolBarContent>
            <MudText Typo="Typo.h6">All Questions</MudText>
                <MudSpacer />
                <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Href="/admin/question/add" />
            <MudTextField @bind-Value="searchEntry" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Question</MudTh>
            <MudTh>ChildA</MudTh>
            <MudTh>ChildB</MudTh>
            <MudTh>ChildC</MudTh>
            <MudTh>ChildD</MudTh>
            <MudTh>ChildE</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTh DataLabel="ID">@context.Id</MudTh>
            <MudTh DataLabel="Question">@context.QuestionMain</MudTh>
            <MudTh DataLabel="ChildA">@context.ChildA</MudTh>
            <MudTh HideSmall="true" DataLabel="ChildB">@context.ChildB</MudTh>
            <MudTh HideSmall="true" DataLabel="ChildC">@context.ChildC</MudTh>
            <MudTh HideSmall="true" DataLabel="ChildD">@context.ChildD</MudTh>
            <MudTh HideSmall="true" DataLabel="ChildE">@context.ChildE</MudTh>
            <MudTh DataLabel="Actions">
                <NavLink class="btn btn-primary btn-sm" href="@GetQuestionDetailsUrl(context.Id)">
                    Details
                </NavLink>
                <NavLink class="btn btn-info btn-sm" href="@GetQuestionEditUrl(context.Id)">
                    Edit
                </NavLink>
            </MudTh>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSpacer />
    </div>
}


@code {
    public IEnumerable<Question> questionsList { get; set; } = Enumerable.Empty<Question>();
    private int? searchEntry;
    private bool striped = false;

    [Parameter]
    public int topicId { get; set; }


    public string GetQuestionDetailsUrl(int id) => $"/admin/questions/details/{id}";
    public string GetQuestionEditUrl(int id) => $"/admin/questions/edit/{id}";

    protected async override Task OnParametersSetAsync() => await GetAllQuestions(topicId);

    private async Task SearchForInput()
    {
        if (searchEntry == null || searchEntry == 0)
            await GetAllQuestions(topicId);
        else
        {
            questionsList = questionsList.Where(x => x.Id == searchEntry).ToList();
        }
    }
    private async Task GetAllQuestions(int topic)
    {
        if (topic.Equals(0))
            questionsList = await repository.GetAllQuestions();
        else
            questionsList = await repository.GetQuestionsSimple((long)topicId);
    }
}
