@page "/admin/questions/{topicId:int}"
@page "/admin/questions"
@layout AdminLayout
@inject IApiRepository repository
@using MedbaseComponents.Services

<PageTitle>Questions</PageTitle>


@if (!QuestionsWithTopicDto.Questions.Any())
{
    <div><em><strong>Loading...</strong></em></div>
}
else
{
    <MudGrid>
        <MudItem sm="8">
            <MudText Typo="Typo.h3">@QuestionsWithTopicDto.TopicName</MudText>
        </MudItem>
        <MudItem sm="4">
            <MudForm @ref="searchForm">
                <MudTextField  @ref="searchTextField" 
                     @bind-Value="searchEntry" 
                        Placeholder="Search for keyword" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SearchQuestions(searchTextField.Text.ToString()))" Class="ml-auto">Search</MudButton>
            </MudForm>
            
        </MudItem>
    </MudGrid>
    <MudTable Items="@QuestionsWithTopicDto.Questions" Dense="true" Hover="true" Bordered="true" Striped="@striped">
        
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Question</MudTh>
            <MudTh>ChildA</MudTh>
            <MudTh>ChildB</MudTh>
            <MudTh>ChildC</MudTh>
            <MudTh>ChildD</MudTh>
            <MudTh>ChildE</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Question">@context.QuestionMain</MudTd>
            <MudTd DataLabel="ChildA">@context.ChildA</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildB">@context.ChildB</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildC">@context.ChildC</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildD">@context.ChildD</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildE">@context.ChildE</MudTd>
            <MudTd DataLabel="Actions">
                <NavLink class="btn btn-primary btn-sm" href="@GetQuestionDetailsUrl(context.Id)">
                    Details
                </NavLink>
                <NavLink class="btn btn-info btn-sm" href="@GetQuestionEditUrl(context.Id)">
                    Edit
                </NavLink>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSpacer />
    </div>
    <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Href="/admin/question/add" style="margin-bottom:75px;" Label="Add Question" class="m-2 me-5 position-fixed bottom-0 end-0 justify-content-center" />
}


@code {
    private QuestionsWithTopicDto QuestionsWithTopicDto { get; set; } = new();
    private string? searchEntry {get;set;}
    private bool striped = false;
    private MudForm searchForm;
    private MudTextField<string> searchTextField;

    [Parameter]
    public int topicId { get; set; }


    public string GetQuestionDetailsUrl(int id) => $"/admin/questions/details/{id}";
    public string GetQuestionEditUrl(int id) => $"/admin/questions/edit/{id}";

    protected async override Task OnParametersSetAsync() => await GetAllQuestions(topicId);

    @* private async Task SearchForInput()
    {
        if (searchEntry == null || searchEntry == 0)
            await GetAllQuestions(topicId);
        else
        {
            questionsList = questionsList.Where(x => x.Id == searchEntry).ToList();
        }
    } *@
    private async Task GetAllQuestions(int topic)
    {
        if (topic.Equals(0))
        {
            QuestionsWithTopicDto.Questions = await repository.GetAllQuestions();
            QuestionsWithTopicDto.TopicName = "All Questions";
        }
        else
            QuestionsWithTopicDto = await repository.GetQuestionsWithTopic(topic);
    }

    private async Task SearchQuestions(string keyword)
    {
        if(!string.IsNullOrEmpty(keyword))
        {
            QuestionsWithTopicDto.Questions = await repository.GetQuestionsByKeyword(keyword);
            QuestionsWithTopicDto.TopicName = $"Search Results for: {keyword}";
            StateHasChanged();
        }
        else
        {
            return;
        }
    }
}
