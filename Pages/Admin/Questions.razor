@page "/admin/questions/{topicId:int}"
@page "/admin/questions"
@layout AdminLayout
@inject IApiRepository repository
@inject NavigationManager navManager
@using MedbaseLibrary.Services

<PageTitle>Questions</PageTitle>

<MudGrid>
    <MudItem sm="7">
        <MudText Typo="Typo.h3">@QuestionsWithTopicDto.TopicName</MudText>
    </MudItem>
    <MudItem sm="5">
        <MudTextField @bind-Value="@searchEntry" Label="Text"
                      Variant="Variant.Outlined"
                      AdornmentColor="Color.Secondary" AutoFocus="true"
                      Placeholder="Search for keywords..." Lines="1"
                      IconSize="Size.Large"
                      Class="w-100 mx-lg-5"
                      AdornmentIcon="@Icons.Material.Filled.Send"
                      Adornment="Adornment.End"
                      @ref="searchTextField"
                      OnAdornmentClick="@(() => SearchQuestions(searchTextField.Text.ToString()))"
                      Disabled=@isBusy
                      Immediate="true"
                      OnKeyUp="@OnKeyUpAsync" Clearable="true"
                      Counter="1_000" MaxLength="1_000" />
    </MudItem>
</MudGrid>


@if (isBusy.Equals(true))
{
    <LoadingComponent Message="Looking that up for you..."/>
}
else if (QuestionsWithTopicDto.Questions.Count() == 0 && isBusy.Equals(false))
{
    <MedbaseBlazor.Pages.Admin.Utilities.QuestionsNotFound ReloadPage="@ReloadPage" />
}
else
{
    <MudTable Items="@QuestionsWithTopicDto.Questions" Dense="true" Hover="true" Bordered="true" Striped="@striped">
        
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Question</MudTh>
            <MudTh>ChildA</MudTh>
            <MudTh>ChildB</MudTh>
            <MudTh>ChildC</MudTh>
            <MudTh>ChildD</MudTh>
            <MudTh>ChildE</MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Question">@context.QuestionMain</MudTd>
            <MudTd DataLabel="ChildA">@context.ChildA</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildB">@context.ChildB</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildC">@context.ChildC</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildD">@context.ChildD</MudTd>
            <MudTd HideSmall="true" DataLabel="ChildE">@context.ChildE</MudTd>
            <MudTd DataLabel="Actions">
                <NavLink class="btn btn-primary btn-sm" href="@GetQuestionDetailsUrl(context.Id)">
                    Details
                </NavLink>
                <NavLink class="btn btn-info btn-sm" href="@GetQuestionEditUrl(context.Id)">
                    Edit
                </NavLink>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Value="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSpacer />
    </div>
    <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Href="/admin/question/add" style="margin-bottom:75px;" Label="Add Question" class="m-2 me-5 position-fixed bottom-0 end-0 justify-content-center" />
}


@code {
    private QuestionsWithTopicDto QuestionsWithTopicDto { get; set; } = new();
    private string? searchEntry {get;set;}
    private bool striped = false;
    private bool isBusy = false;
    private MudForm searchForm;
    private MudTextField<string> searchTextField;

    [Parameter]
    public int topicId { get; set; }


    public string GetQuestionDetailsUrl(int id) => $"/admin/questions/details/{id}";
    public string GetQuestionEditUrl(int id) => $"/admin/questions/edit/{id}";

    protected async override Task OnParametersSetAsync() => await GetAllQuestions(topicId);

    private async Task OnKeyUpAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(searchEntry))
        {
            await SearchQuestions(searchEntry);
        }
    }

    private async Task GetAllQuestions(int topic)
    {
        if (topic.Equals(0))
        {
            QuestionsWithTopicDto.Questions = await repository.GetAllQuestions();
            QuestionsWithTopicDto.TopicName = "All Questions";
        }
        else
            QuestionsWithTopicDto = await repository.GetQuestionsWithTopic(topic);
    }

    private async Task SearchQuestions(string keyword)
    {
        isBusy = true;
        try
        {
            if (!string.IsNullOrEmpty(keyword))
            {
                QuestionsWithTopicDto.Questions = await repository.GetQuestionsByKeyword(keyword);
                QuestionsWithTopicDto.TopicName = $"Search Results for: {keyword}";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isBusy = false;
        }
    }

    //Method to reload same uri
    private void ReloadPage()
    {
        navManager.NavigateTo(navManager.Uri, forceLoad: true);
    }
}
