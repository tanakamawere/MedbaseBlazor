@page "/admin/essays"
@layout AdminLayout
@inject IApiRepository repository
@inject IEssaysRepository essaysRepository
@using MedbaseLibrary.Essays

<PageTitle>Admin Essays</PageTitle>

@if (!allEssays.Any())
{
    <LoadingComponent />
}
else
{
    <MudButton>
        <NavLink href="/admin/essays/add">Create New Essays</NavLink>
    </MudButton>
    <MudTable Items="allEssays" Hover="true">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Topic Reference</MudTh>
            <MudTh>Date Updated</MudTh>
            <MudTh>Question</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd HideSmall="true" DataLabel="ID">@context.Id</MudTd>
            <MudTd HideSmall="true" DataLabel="Course Ref">@context.TopicRef</MudTd>
            <MudTd DataLabel="DateTime">@context.DateUpdated.ToString("dddd MMMM yy, hh:mm")</MudTd>
            <MudTd HideSmall="true" DataLabel="Course Ref">@context.Question</MudTd>
            <MudTd DataLabel="Actions">
                <NavLink class="btn btn-info btn-sm" href="@($"/admin/essays/edit/{context.Id}")">
                    Edit
                </NavLink>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private IEnumerable<Essay> allEssays { get; set; } = Enumerable.Empty<Essay>();

    private bool _isLoading;
    protected async override Task OnInitializedAsync() => allEssays = await essaysRepository.GetAllEssays();
}
