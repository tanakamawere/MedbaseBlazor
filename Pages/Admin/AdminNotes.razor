@page "/admin/notes"
@layout AdminLayout
@inject IApiRepository repository
@inject INotesRepository notesRepository

<PageTitle>Admin Notes</PageTitle>

@if (!allNotes.Any())
{
    <LoadingComponent />
}
else
{
    <MudButton>
        <NavLink href="/admin/notes/add">Create New Note</NavLink>
    </MudButton>
    <MudTable Items="allNotes" Hover="true">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Course Reference</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Date Updated</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd HideSmall="true" DataLabel="ID">@context.Id</MudTd>
            <MudTd HideSmall="true" DataLabel="Course Ref">@context.CourseRef</MudTd>
            <MudTd HideSmall="true" DataLabel="Course Ref">@context.Title</MudTd>
            <MudTd DataLabel="Title">@context.DateUpdated.ToString("dddd MMMM yy, hh:mm")</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="() => DeleteNote(context.Id)">
                    Delete
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/admin/notes/edit/{context.Id}")">
                    Edit
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    private IEnumerable<Note> allNotes { get; set; } = Enumerable.Empty<Note>();

    private bool _isLoading;
    protected async override Task OnInitializedAsync() => await GetNotesAsync();

    private async Task GetNotesAsync()
    {
        allNotes = await notesRepository.GetAllNotes();
    }

    private async void DeleteNote(int noteId)
    {
        notesRepository.DeleteNotes(noteId);

        await GetNotesAsync();
    }
}
