@page "/admin/questions/edit/{id:int}"
@page "/admin/questions/editfromtopic/{topicId:int}"
@page "/admin/question/add"
@layout AdminLayout
@inject IApiRepository repository
@inject ISnackbar Snackbar
@using MedbaseComponents.Models
@using MedbaseBlazor.Pages.Admin.Utilities
@using Markdig


@if (Question is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-4">
        @* <div class="row">
            <div class="col-4">
            </div>
            <div class="col-8">
                
            </div>
        </div> *@
        <div class="col-form-label">
            <label>Course</label>
            <select @onchange="GetCourseTopics">
                @foreach (Course item in Courses)
                {
                    <option value="@item.CourseRef">@item.Title</option>
                }
            </select>
        </div>
        <EditForm Model="Question" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-6">
                    <MudSelect For="@(() => Question.TopicRef)" Label="Topic" @bind-Value="Question.TopicRef">
                        @foreach (Topic item in Topics)
                        {
                            <MudSelectItem Value="@item.TopicRef">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                <div class="col-6">
                    <MudTextField For="@(() => Question.QuestionMain)" Variant="Variant.Filled" Lines="3" Label="Question Main" @bind-Value="Question.QuestionMain" />
                </div>
            </div>
            <hr />

            <MudPaper Class="p-3">
                <!--Child A-->
                <MudTextField T="string" Variant="Variant.Filled" Lines="2" Label="Child A" @bind-Value="Question.ChildA" For="@(() => Question.ChildA)" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <MudSelect Label="Answer A" @bind-Value="Question.AnswerA">
                            <MudSelectItem Value="true">True</MudSelectItem>
                            <MudSelectItem Value="false">False</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MarkdownEditor LineNumbers="@false" MaxHeight="@markdownEditorHeight" @bind-Value="Question.ExplanationA" />
                    </MudItem>
                </MudGrid>
                <hr />

                <!--Child B-->
                <MudTextField For="@(() => Question.ChildB)" T="string" Variant="Variant.Filled" Lines="2" Label="Child B" @bind-Value="Question.ChildB" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <MudSelect Label="Answer B" @bind-Value="Question.AnswerB">
                            <MudSelectItem Value="true">True</MudSelectItem>
                            <MudSelectItem Value="false">False</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MarkdownEditor LineNumbers="@false" MaxHeight="@markdownEditorHeight" @bind-Value="Question.ExplanationB" />
                    </MudItem>
                </MudGrid>

                <hr />
                <!--Child C-->

                <MudTextField For="@(() => Question.ChildC)" T="string" Variant="Variant.Filled" Lines="2" Label="Child C" @bind-Value="Question.ChildC" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <MudSelect Label="Answer C" @bind-Value="Question.AnswerC">
                            <MudSelectItem Value="true">True</MudSelectItem>
                            <MudSelectItem Value="false">False</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MarkdownEditor LineNumbers="@false" MaxHeight="@markdownEditorHeight" @bind-Value="Question.ExplanationC" />
                    </MudItem>
                </MudGrid>

                <hr />
                <!--Child D-->
                <MudTextField For="@(() => Question.ChildD)" T="string" Variant="Variant.Filled" Lines="2" Label="Child D" @bind-Value="Question.ChildD" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <MudSelect Label="Answer D" @bind-Value="Question.AnswerD">
                            <MudSelectItem Value="true">True</MudSelectItem>
                            <MudSelectItem Value="false">False</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MarkdownEditor LineNumbers="@false" MaxHeight="@markdownEditorHeight" @bind-Value="Question.ExplanationD" />
                    </MudItem>
                </MudGrid>

                <hr />

                <!--Child E-->
                <MudTextField For="@(() => Question.ChildE)" T="string" Variant="Variant.Filled" Lines="2" Label="Child E" @bind-Value="Question.ChildE" />
                <MudGrid>
                    <MudItem xs="12" sm="3">
                        <MudSelect Label="Answer E" @bind-Value="Question.AnswerE">
                            <MudSelectItem Value="true">True</MudSelectItem>
                            <MudSelectItem Value="false">False</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="9">
                        <MarkdownEditor LineNumbers="@false" MaxHeight="@markdownEditorHeight" @bind-Value="Question.ExplanationE" />
                    </MudItem>
                </MudGrid>

                <MudButtonGroup>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Submit Question</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Filled" ButtonType="ButtonType.Button" OnClick="ClearFields">Clear Fields</MudButton>
                </MudButtonGroup>
            </MudPaper>
        </EditForm>
    </div>
}

@code {

    public Question Question{ get; set; } = new();
    [Parameter]
    public int id { get; set; } = 0;
    [Parameter]
    public int topicId { get; set; } = 0;
    bool myBool;
    private string markdownEditorHeight = "30";

    private Snackbar snackbar;

    private IEnumerable<Topic> Topics { get; set; } = Enumerable.Empty<Topic>();
    private IEnumerable<Course> Courses { get; set; } = Enumerable.Empty<Course>();


    protected async override Task OnInitializedAsync()
    {
        Courses = await repository.GetCourses();
    }

    [Inject]
    public NavigationManager NavManager { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            Question = await repository.GetQuestion(id) ?? new();
        }
        else
            return;

        if (topicId != 0)
        {
            this.Question = new();
            Question.TopicRef = topicId;
        }
    }

    private async Task GetCourseTopics(ChangeEventArgs e)
    {
        Topics = await repository.GetTopics(e.Value.ToString());
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        if (id == 0)
        {
            try
            {
                var success = await repository.PostQuestion(Question); // Assuming PostQuestion returns a bool indicating success
                if (success)
                {
                    snackbar = Snackbar.Add("Question posted successfully!", Severity.Success);
                    ClearFields();
                }
                else
                {
                    snackbar = Snackbar.Add("Failed to post question. Please try again.", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                snackbar = Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            try
            {
                var success = await repository.UpdateQuestion(id, Question); // Assuming UpdateQuestion returns a bool indicating success
                if (success)
                {
                    snackbar = Snackbar.Add("Question updated successfully!", Severity.Success);
                }
                else
                {
                    snackbar = Snackbar.Add("Failed to update question. Please try again.", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                snackbar = Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ClearFields()
    {
        id = 0;
        Question.QuestionMain = string.Empty;
        Question.ChildA = string.Empty;
        Question.ChildB = string.Empty;
        Question.ChildC = string.Empty;
        Question.ChildD = string.Empty;
        Question.ChildE = string.Empty;
        Question.ExplanationA = string.Empty;
        Question.ExplanationB = string.Empty;
        Question.ExplanationC = string.Empty;
        Question.ExplanationD = string.Empty;
        Question.ExplanationE = string.Empty;
    }
}

           