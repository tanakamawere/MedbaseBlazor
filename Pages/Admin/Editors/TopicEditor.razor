@page "/admin/topics/edit/{id:int}"
@page "/admin/topics/add"
@layout AdminLayout
@inject IApiRepository repository


<EditForm Model="Topic" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator />
    <MudSelect AnchorOrigin="Origin.BottomCenter" For="@(() => Topic.CourseRef)" Label="Course Reference" @bind-Value="Topic.CourseRef">
        @foreach (Course item in Courses)
        {
            <MudSelectItem Value="@item.CourseRef">@item.CourseRef</MudSelectItem>
        }
    </MudSelect>
    <MudNumericField Label="Topic Reference"For="@(() => Topic.TopicRef)" @bind-Value="Topic.TopicRef" />
    <MudTextField Label="Name" @bind-Value="Topic.Name" For="@(() => Topic.Name)" />
    <button class="btn btn-primary" type="submit">Done</button>
</EditForm>


@code {
    public Topic Topic { get; set; } = new();
    [Parameter]
    public int id { get; set; } = 0;
    private IEnumerable<Course> Courses { get; set; } = Enumerable.Empty<Course>();
    private IEnumerable<Topic> Topics { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Courses = await repository.GetCourses();
        Topics = await repository.GetAllTopics();
        Topic.TopicRef = Topics.Last().TopicRef + 1;
    }
        
    [Inject]
    public NavigationManager NavManager { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            Topic = await repository.GetTopic(id) ?? new();
        }
    }
    private void SaveChanges()
    {
        if (id == 0)
        {
            repository.PostTopic(Topic);
        }
        else
        {
            repository.UpdateTopic(id, Topic);
        }
        NavManager.NavigateTo("/admin/topics");
    }
}
