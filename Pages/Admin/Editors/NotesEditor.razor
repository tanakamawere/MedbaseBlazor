@page "/admin/notes/edit/{id:int}"
@page "/admin/notes/add"
@layout AdminLayout
@using MedbaseBlazor.Pages.Admin.Utilities
@inject INotesRepository notesRepository
@inject IApiRepository repository
@inject ISnackbar Snackbar
@using Markdig

<PageTitle>Admin | Notes Editor</PageTitle>

@if(isBusy)
{
    <LoadingComponent Message="Doing something over here..."></LoadingComponent>
}
else
{
    <MudContainer>
        <EditForm Model="Note" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator />
            <MudSelect Label="Course" @bind-Value="Note.CourseRef">
                @foreach (Course item in Courses)
                {
                    <MudSelectItem Value="@item.CourseRef">@item.Title</MudSelectItem>
                }
            </MudSelect>
            <MudTextField For="@(() => Note.Title)" T="string"
                          Variant="Variant.Filled"
                          Lines="1"
                          Label="Title"
                          @bind-Value="Note.Title" />
            <div class="col-form-label d-none">
                <label>Date Posted</label>
                <ValidationMessage For="@(() => Note.DateUpdated)" />
                <InputDate class="form-control" @bind-Value="Note.DateUpdated" />
            </div>
            <MarkdownEditor Placeholder="Write the notes right here"
                            LineNumbers="@false"
                            MaxHeight="@markdownEditorHeight"
                            @bind-Value="Note.Text" />
            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Save Changes</MudButton>
        </EditForm>
    </MudContainer>
}

@code {
    public Note Note { get; set; } = new Note();
    private Snackbar snackbar;
    private bool isBusy;

    [Parameter]
    public int id { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private IEnumerable<Course> Courses { get; set; } = Enumerable.Empty<Course>();
    private string markdownEditorHeight = "30";

    protected override async Task OnParametersSetAsync()
    {
        Courses = await repository.GetCourses();
        if (id != 0)
        {
            Note = await notesRepository.GetNotesById(id) ?? new();
        }
        else
            return;
    }

    private async Task SaveChanges()
    {
        isBusy = true;
        try
        {
            if (id != 0)
            {
                Note.DateUpdated = DateTime.Now;
                await notesRepository.UpdateNoteAsync(Note);
            }
            else
            {
                await notesRepository.AddNoteAsync(Note);
            }
            NavigationManager.NavigateTo("/admin/notes");
        }
        catch (Exception ex)
        {
            //Snackbar notification of the error
            snackbar = Snackbar.Add($"Failure. Error: {ex.Message}", Severity.Warning);
        }
        finally
        {
            isBusy = false;
        }   
    }
}
