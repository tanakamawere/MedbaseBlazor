@page "/admin/notes/edit/{id:int}"
@page "/admin/notes/add"
@layout AdminLayout
@using MedbaseBlazor.Pages.Admin.Utilities
@inject IApiRepository repository
@using Markdig

<PageTitle>Admin | Notes Editor</PageTitle>

<MudContainer>
    <div class="col-8">
        <div class="col-form-label">
            <label>Course</label>
            <select Label="" @onchange="GetCourseTopics">
                @foreach (Course item in Courses)
                {
                    <option value="@item.CourseRef">@item.Title</option>
                }
            </select>
        </div>
    </div>
    <EditForm Model="Note" OnValidSubmit="SaveChanges">
        <DataAnnotationsValidator />
        <MudSelect Label="Topic" @bind-Value="Note.TopicReference">
            @foreach (Topic item in Topics)
            {
                <MudSelectItem Value="@item.TopicRef">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <div class="col-form-label d-none">
            <label>Date Posted</label>
            <ValidationMessage For="@(() => Note.DateUpdated)" />
            <InputDate class="form-control" @bind-Value="Note.DateUpdated" />
        </div>
        <div class="col-form-label">
            <label>Text</label>
            <ValidationMessage For="@(() => Note.Text)" />
            <MarkdownTextInput class="form-control" @bind-Value="Note.Text" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
</MudContainer>

@code {
    public Note Note { get; set; } = new Note();

    [Parameter]
    public int Id { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private IEnumerable<Topic> Topics { get; set; } = Enumerable.Empty<Topic>();
    private IEnumerable<Course> Courses { get; set; } = Enumerable.Empty<Course>();

    protected override async Task OnInitializedAsync()
    {
        Courses = await repository.GetCourses();

        if (Id != 0)
        {
            Note = await repository.GetNoteByReferenceAsync(Id);
        }
    }

    private async Task GetCourseTopics(ChangeEventArgs e)
    {
        Topics = await repository.GetTopics(e.Value.ToString());
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        if (Id != 0)
        {
            Note.DateUpdated = DateTime.Now;
            await repository.UpdateNoteAsync(Note);
        }
        else
        {
            await repository.AddNoteAsync(Note);
        }
        NavigationManager.NavigateTo("/admin/notes");
    }
}
