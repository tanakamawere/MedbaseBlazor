@using Microsoft.AspNetCore.Identity
@inject ISnackbar Snackbar
@inject IAuthService authService
@inject IApiRepository repository

<MudDialog>
    <DialogContent>
        <MudAutocomplete T="UserDto" Label="User Email Address"
                         @bind-Value="userDto"
                         SearchFunc="OnUserBeingTyped"
                         ResetValueOnEmptyText="true"
                         ToStringFunc="@(u => u == null ? "Enter email" : u.Email)"
                         Placeholder="Enter email address"
                         CoerceText="true"
                         CoerceValue="false" />
        <MudSelect Label="Subscriptions" @bind-Value="subscription">
            @foreach (Subscription item in subscriptions)
            {
                <MudSelectItem Value="item">
                    @item.Name
                </MudSelectItem>
            }
        </MudSelect>
        <MudSelect Label="Duration" @bind-Value="durationDays">
            @foreach (var item in durationLength)
            {
                <MudSelectItem Value="item.Value">@item.Key</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="OnSetSubscription">
            Done
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private Subscription subscription = new();
    private string userEmailAddress;
    private UserDto userDto = new();
    private int durationDays = 0;
    private Snackbar snackbar;
    private IEnumerable<Subscription> subscriptions = Enumerable.Empty<Subscription>();
    private IEnumerable<UserDto> users = Enumerable.Empty<UserDto>();
    private Dictionary<string, int> durationLength = new Dictionary<string, int>()
    {
        { "1 Week", 7},
        { "2 Weeks", 14 },
        { "1 Month", 30 }
    };

    protected override async Task OnInitializedAsync()
    {
        subscriptions = await repository.GetSubscriptionsAsync();
        users = await authService.GetAllUsersAsync();
    }

    private async Task<IEnumerable<UserDto>> OnUserBeingTyped(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return users;
        return users.Where(x => x.Email.Contains(value));
    }

    private async Task OnSetSubscription()
    {
        if (subscription is null || userDto.Email is null || durationDays.Equals(0))
            return;

        UserSubDto userSubDto = new()
            {
                UserEmailAddress = userDto.Email,
                Subscription = subscription,
                StartDate = DateTime.Now,
                EndDate = DateTime.Now.AddDays(durationDays),
            };

        var response = await repository.CreateUserSubscriptionAsync(userSubDto);
        if (response.IsSuccess)
        {
            snackbar = Snackbar.Add(response.Message, Severity.Success);
            MudDialog.Close();
        }
        else
        {
            snackbar = Snackbar.Add(response.Message, Severity.Error);
        }
    }
}
