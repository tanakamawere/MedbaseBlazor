@inject IApiRepository repository
@using Markdig

<MudDialog>
    <DialogContent>

        <input hidden asp-for="@question.Id" />
        <!--Child1-->
        <div>
            <MudText>a) @question.ChildA</MudText>
            <MudPaper Outlined="true" Class="p-1">
                <MudText>
                    @question.AnswerA.ToString()
                </MudText>
                @((MarkupString)Markdown.ToHtml(question.ExplanationA == null ? " " : question.ExplanationA))
            </MudPaper>
        </div>
        <!--Child2-->
        <div>
            <MudText>b) @question.ChildB</MudText>
            <MudPaper Outlined="true" Class="p-1">
                <MudText>
                    @question.AnswerB.ToString()
                </MudText>
                @((MarkupString)Markdown.ToHtml(question.ExplanationB == null ? " " : question.ExplanationB))
            </MudPaper>
        </div>
        <!--Child3-->
        <div>
            <MudText>c) @question.ChildC</MudText>
            <MudPaper Class="p-1" Outlined="true">
                <MudText>
                    @question.AnswerC.ToString()
                </MudText>
                @((MarkupString)Markdown.ToHtml(question.ExplanationC == null ? " " : question.ExplanationC))
            </MudPaper>
        </div>
        <!--Child4-->
        <div>
            <MudText>d) @question.ChildD</MudText>
            <MudPaper Outlined="true" Class="p-1">
                <MudText>
                    @question.AnswerD.ToString()
                </MudText>
                @((MarkupString)Markdown.ToHtml(question.ExplanationD == null ? " " : question.ExplanationD))
            </MudPaper>
        </div>
        <!--Child5-->
        <div>
            <MudText>e) @question.ChildE</MudText>

            <MudPaper Class="p-1" Outlined="true">
                <MudText>
                    @question.AnswerE.ToString()
                </MudText>
                @((MarkupString)Markdown.ToHtml(question.ExplanationE == null ? " " : question.ExplanationE))
            </MudPaper>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Submit Change</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public int questionId { get; set; }
    [Parameter]
    public int correctionId { get; set; }


    Question question;

    protected override async Task OnInitializedAsync()
    {
        question = new();
        question = await repository.GetQuestion(questionId);
    }

    private async Task MergeOneCorrection(int id)
    {
        await repository.MergeOneCorrection(id);
    }

    async void Submit()
    {
        await MergeOneCorrection(correctionId);
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}
